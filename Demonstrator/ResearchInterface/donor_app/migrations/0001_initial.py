# Generated by Django 3.1.8 on 2021-06-01 12:27

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Consent',
            fields=[
                ('name', models.CharField(max_length=200)),
                ('description', models.CharField(max_length=1000)),
                ('user_id', models.CharField(default='', max_length=500)),
                ('experiments', models.CharField(default='', max_length=1000)),
                ('token', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('signed_vc', models.CharField(max_length=20000)),
                ('consent_created', models.DateTimeField(default=datetime.datetime(1899, 12, 31, 23, 40, tzinfo=utc), verbose_name='date created')),
                ('consent_signed', models.DateTimeField(default=datetime.datetime(1899, 12, 31, 23, 40, tzinfo=utc), verbose_name='date signed')),
                ('status', models.CharField(choices=[('NOT DONE', 'Consent has not been signed yet'), ('DONE', 'Consent has been signed')], default='NOT DONE', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='ConsentLogger',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=500)),
                ('request_received', models.DateTimeField(default=datetime.datetime(1899, 12, 31, 23, 40, tzinfo=utc), verbose_name='date received')),
                ('type', models.CharField(choices=[('IS SIGNED?', 'Request to check whether consent is signed'), ('ALLOWED EXPERIMENTS', 'Request to check what experiments are allowed'), ('LOG EXPERIMENT', 'Request to log experiment'), ('LOG NOT SIGNED EXPERIMENT', 'Request to log experiment which is not signed')], default='', max_length=30)),
                ('consent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='donor_app.consent')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('question1', models.CharField(max_length=100)),
                ('answer1', models.CharField(max_length=100)),
                ('question2', models.CharField(max_length=100)),
                ('answer2', models.CharField(max_length=100)),
                ('question3', models.CharField(max_length=100)),
                ('answer3', models.CharField(max_length=100)),
                ('publickey', models.CharField(max_length=500)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
